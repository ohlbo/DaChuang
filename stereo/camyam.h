#pragma once
#include <opencv2/opencv.hpp>  
#include <iostream>  
#include <math.h> 
using namespace std;
using namespace cv;
#if 0
//左相机内参
Mat cameraMatrixL = (Mat_<double>(3, 3) << 450.725728322923, -0.429281749738844, 304.493919822487, 0, 451.989254391382, 242.626583091718, 0, 0, 1.);

Mat distCoeffL = (Mat_<double>(5, 1) <<-0.0516967132928546, -0.0192367139254009, 0.00134613590531853, 0.000828259926350484, 0);

//右相机内参
Mat cameraMatrixR = (Mat_<double>(3, 3) << 451.803665288694, -0.0315808256679657, 297.430485175967, 0, 452.788209483189, 253.140396690494, 0, 0, 1);

Mat distCoeffR = (Mat_<double>(5, 1) << -0.0482817387134942, -0.0319360179489942, 0.00160065055423596,0.000238307080994175, 0);

//平移和旋转矩阵
Mat T = (Mat_<double>(3, 1) << -60.7847022110205, 0.141064472089137, 0.494495060577857);//T平移向量

Mat rec = (Mat_<double>(3, 3) << 0.999967288553192,-0.000134868070740553, 0.00808725133655687,
	0.000122521295576487, 0.999998826366243, 0.00152717211487678,
	-0.00808744781184252, -0.00152613129835597,0.999966131482037);


#else 
//左相机内参
Mat cameraMatrixL = (Mat_<double>(3, 3) << 445.516717193269, 0.118309948255981, 301.441351338224, 0, 446.38067706113, 240.91707563274, 0, 0, 1.);

Mat distCoeffL = (Mat_<double>(5, 1) << -0.0403553758960019, -0.0498117309379909, 0.00200416788865669, -0.000913326354591621, 0);

//右相机内参
Mat cameraMatrixR = (Mat_<double>(3, 3) << 446.059563786895, 0.46880044666751, 293.731444583646, 0, 446.812532507695, 250.847018731304, 0, 0, 1);

Mat distCoeffR = (Mat_<double>(5, 1) << -0.0353400996367637, -0.0874095987763081, 0.00155661253603857,-0.00109243324087407, 0);

//平移和旋转矩阵
Mat T = (Mat_<double>(3, 1) << -61.0882115548872, 0.104675248210411, 0.469091647902678);//T平移向量

Mat rec = (Mat_<double>(3, 3) << 0.999976951668796,-0.0000773865799691359, 0.00678897212388927,
	0.0000537804185248097, 0.99999395291216, 0.00347724701161988,
	-0.00678920016263243, -0.0034768017531169, 0.999970908882214);

#endif
