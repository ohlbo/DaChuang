#pragma once
#pragma once
#include <opencv2/opencv.hpp>  
#include <iostream>  
#include <math.h> 
using namespace std;
using namespace cv;
#if 1
//左相机内参
Mat cameraMatrixL = (Mat_<double>(3, 3) << 682.818249589604, -4.94949616593674, 613.509538737764, 0, 680.786457098444, 357.054186360342, 0, 0, 1.);

Mat distCoeffL = (Mat_<double>(5, 1) << -0.0682823040090591, -0.00392117794904527,0.00138794819010813, 0.00311337111372325, 0);

//右相机内参
Mat cameraMatrixR = (Mat_<double>(3, 3) << 687.445388473124, -4.93199287735292, 607.745793722128, 0, 684.705949797535, 363.283287048794, 0, 0, 1);

Mat distCoeffR = (Mat_<double>(5, 1) << -0.0550800797875906, -0.023568920886436, 0.000646820027342834,0.00228162901928162, 0);

//平移和旋转矩阵
Mat T = (Mat_<double>(3, 1) << -60.9487599279387, 0.272187836267514, -0.386190217836415);//T平移向量

Mat rec = (Mat_<double>(3, 3) << 0.999994769642315,-0.000606829331304965, 0.00317686105704035,
	0.000604311367240723, 0.9999995025867, 0.000793494880201662,
	-0.00317734099279495, -0.000791570916690711, 0.999994638945479);


#else 
Mat cameraMatrixL = (Mat_<double>(3, 3) << 
	442.757985352136,-2.80965469842116, 280.6231280283, 
	0, 440.665129557283,230.715123147645, 
	0, 0, 1.);

Mat distCoeffL = (Mat_<double>(5, 1) << -0.0744573066444957, 0.090501933968739, -0.00175727146695076, -0.00863346596055575, 0);

//右相机内参
Mat cameraMatrixR = (Mat_<double>(3, 3) << 444.066733442041, -3.47953007739736,280.501224813283,
	0, 442.666278792331, 236.340969136626,
	0, 0, 1);

Mat distCoeffR = (Mat_<double>(5, 1) << -0.0736166191362481,-0.00796142750277822, -0.000733094323331182, -0.00766356723993587, 0);

//平移和旋转矩阵
Mat T = (Mat_<double>(3, 1) << -61.2549129181122, -0.0224648793003141,0.899176096122879);//T平移向量

Mat rec = (Mat_<double>(3, 3) <<0.999986222754248,0.000712036472919678, -0.00520070242874671,
	-0.00072265816950494, 0.999997656519929, -0.0020407645187873,
	0.00519923714223419, 0.0020444947327703, 0.999984393865438);
#endif
